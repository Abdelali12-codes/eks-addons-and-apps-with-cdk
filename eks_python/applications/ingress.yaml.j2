apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ name }}
  labels:
    app: {{ name }}
  annotations:
    # Ingress Core Settings
    alb.ingress.kubernetes.io/load-balancer-name: ingress-loadbalancer
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Health Check Settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: {{ healthcheckpath }}
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/group.name: "microservices"
    alb.ingress.kubernetes.io/group.order: '{{ grouporder }}'
    alb.ingress.kubernetes.io/certificate-arn: {{ certificatearn }}
    # SSL 
    #alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443},{"HTTP":80}]'
spec:
  ingressClassName: aws-ingress-class
  tls:
  - hosts:
    - "*.{{ domain }}"
  rules:
    {% for host in hosts %}            
    - host: {{ host }}
      http:
       paths:
       - path: {{ path }}
         pathType: Prefix
         backend:
           service:
            name: {{ service }}
            port:
              number: {{ port }}
    
    {% endfor %}
              
              
              
              
              



