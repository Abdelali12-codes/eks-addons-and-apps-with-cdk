apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: observability
  namespace: aws-otel-eks
spec:
  mode: deployment
  serviceAccount: aws-otel-collector
  ports:
    - name: xray
      port: 2000
      protocol: UDP
    - name: otlphttp
      port: 4318
      protocol: TCP
    - name: otlpgrpc
      port: 4317
      protocol: TCP
  config:
    receivers:
      awsxray: {}
      #
      # Scrape configuration for the Prometheus Receiver
      # This is the same configuration used when Prometheus is installed using the community Helm chart
      #
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          global:
            scrape_interval: 15s
            scrape_timeout: 10s

          scrape_configs:
            - job_name: 'flask_app'
              kubernetes_sd_configs:
                - role: pod

              relabel_configs:
                # Keep only pods with prometheus.io/scrape=true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true

                # Use prometheus.io/path if specified
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)

                # Replace the address with pod IP + prometheus.io/port
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: (.+):(?:\d+);(\d+)
                  replacement: $1:$2
                  target_label: __address__

                # Import pod labels as Prometheus labels
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)

                # Add pod namespace as a label
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: kubernetes_namespace

                # Add pod name as a label
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: kubernetes_pod_name

    processors:
      batch/metrics:
        timeout: 60s         

    exporters:
      awsxray: {}
      #
      # Prometheus Remote Write exporter
      # This exporter is used to send metrics to a workspace in Amazon Managed Prometheus
      #
      prometheusremotewrite:
        endpoint: {{ ENDPOINT }}
        auth:
          authenticator: sigv4auth
    
    extensions:
      sigv4auth:
        region: {{ REGION }}
        service: "aps"

    service:
      extensions: [sigv4auth]
      pipelines:
        #
        # Traces pipeline with X-Ray receiver and exporter
        #
        traces:
          receivers: [otlp, awsxray]
          exporters: [awsxray]      
        #
        # Metrics pipeline for collecting Prometheus metrics and sending them to Amazon Managed Prometheus
        #
        metrics:
          receivers: [otlp, prometheus]
          processors: [batch/metrics]
          exporters: [prometheusremotewrite]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-prometheus-role
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-prometheus-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-prometheus-role
subjects:
  - kind: ServiceAccount
    name: aws-otel-collector
    namespace: aws-otel-eks              